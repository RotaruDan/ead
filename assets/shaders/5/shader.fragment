#ifdef GL_ES
precision mediump float;
#endif

uniform float time;
uniform vec2 resolution;

#define PI 3.141592

vec4 calc_sphere(vec2 position, vec2 coord, float radius)
{
	float distance = length(position.xy - coord);
	float lum = pow(radius / distance, 2.0);

	return vec4(vec3(0, 1, 0) * vec3(lum), 1.0);
}

vec4 calc_line(vec2 position, vec2 coord, float size)
{
	if (position.x < coord.x)
		return vec4(0);

	position.y *= cos((coord.x - position.x));
	position.y *= cos(size);
	
	float distance = length(position.y - coord.y);
	float lum = pow(size / distance, 6.0);
	
	return vec4(vec3(43, 6, 7) * vec3(lum), 7.0);
}

void main( void )
{
	gl_FragColor = vec4(0.0); //must init if only adding to this!!
	float speed = time * 1.0;
	vec2 coord = gl_FragCoord.xy / min(resolution.x, resolution.y) - vec2(1.0, 0);
	
	// Sphere 1
	float xPos = 0.80;
	float yPos = (sin(speed) + 1.0) * 0.5;
	float radius = 0.05 * pow(cos(speed * 0.5), 2.0);
	gl_FragColor += calc_sphere(vec2(xPos, yPos), coord, radius);
	
	// Line 1
	gl_FragColor += calc_line(vec2(xPos, yPos), coord, radius * 0.85);

	// Sphere 2
	xPos = 0.99;
	yPos = (sin(speed + PI) + 2.0) * 0.4;
	radius = 0.05 * pow(sin(speed * 0.5), 0.6);
	//gl_FragColor += calc_sphere(vec2(xPos, yPos), coord, radius);

	// Line 2
	//gl_FragColor += calc_line(vec2(xPos, yPos), coord, radius * 0.2);
}
